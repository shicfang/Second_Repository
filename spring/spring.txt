1、搭建spring环境
http://maven.springframework.org/release/org/springframework/spring

jar:
spring-aop.jar               开发AOP特性时需要的jar
spring-beans.jar            处理bean的jar               <bean>
spring-context.jar          处理spring的上下文的jar <context>
spring-core.jar              spring核心jar
spring-expressioin.jar    spring表达式
commons-logging.jar

2、编写配置文件
下载插件：spring tool suite  https://spring.io/tools/sts/all
springsource-tool-suite-x.x.x.RELEASE-e4.7.3a-updatesite.zip.r

3、IOC开发
springIOC容器：创建对象，给对象的属性赋值
id:唯一标识符
class:指定类型
property:class所代表的属性的类
name:属性名
value:属性值
applicationContext.xml
a.通过setter（）赋值
<bean id="student" class="">
<property name="" value=""></property>
<property name="对象类型" ref="需要引用的id值"></property>

使用：
//上下文对象
ApplicationContext context=new ClassPathXmlApplicationContext("applicationContext.xml");
//从springIOC容器中获取以id为student的对象
Student student=(Student)context.getBean("student");

value属性和<value>标签
<property name="" value="z&lt;s"></property>
<property name="" >
<value type="类型">xxx（不需要双引号）z&lt;s  或 z<![CDATA[xxx]]>s</value>
</property>


</bean>
IOC容器赋值：如果是简单类型（8个基本+String），value;
                     如果是对象类型，ref="需要引用的id值",实现了对象与对象之间的关系


b.构造器赋值（顺序与构造方法一致，如不一致，则需要通过index或name或type指定）
<constructor-arg value="属性1" index="索引值0、1，2。。。"></constructor-arg>
<constructor-arg value="属性2"  name="指定参数名"></constructor-arg>
<constructor-arg value="属性3"  type="类型"></constructor-arg>
<constructor-arg value="属性4"></constructor-arg>
<constructor-arg ref="对象类型"></constructor-arg>

<constructor-arg value="属性4">
<value>xxx</value>
</constructor-arg>

c.命名空间（顺序不影响）
<bean id="" class="" p:属性名=“属性值”p:xxx(对象引用类型)-ref="引用的ID">

4、赋值：
对象类型：<property name=""><null/></property>
赋空值 “”：<property name=""><value></value></property>

5、集合类型
<bean id="collection" class="">
<property name="listtest">'
<list>
<value>xxx</value>
</list>
</property>

<property name="settest">'
<set>
<value>xxx</value>
<value>...</value>
</set>
</property>

<property name="arraytest">'
<array>
<value>...</value>
</array>
</property>


<property name="map">
<map>
<entry>
<key>
<value>xxx</value>
</key>
</entry>
<entry>
<key>
<value>...</value>
</key>
</entry>
</map>
</property>

<property name="propstest">'
<props>
<prop key="">xxx</prop>
<prop key="">...</prop>
</prop>
</propertys>
</bean>


6、自动装配（只适用于ref类型）：减少代码量，降低程序可读性
ref="xxx"    <bean id="xxx">
<bean id="" class=""  autowire="byName"></bean>
byName:自动寻找其他bean的id是否等于该类的属性名
byType:其他bean的类型（class）是否与该了的ref属性一致（满足当前IOC容器中只能有一个bean满足条件）
constructor:其他bean的类型是否与该类的构造方法参数的类型一致
 在头文件中将该IOC容器的bean统一设置成自动装配：default-autowire="byName"

使用注解定义bean：通过注解的形式，
@Component("xxx")放入ioc容器
public class xxx(){}

配置扫描器
<context:component-scan base--package="包名"/>

@Component:细化
dao层注解:@Repository
service层注解：@Service
控制器层注解:@Controller


7、通过注解实现事务（声明式事务）Service层
a.jar:
spring-tx-4.3.9.RELEASE.jar  
ojdbc.jar oracle
commons-dbcp.jar连接池 
commons-pools.jar
spring-jdbc-4.3.9.RELEASE.jar
aopaliance.jar

b.配置
<!---配置数据库相关-->
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
<property name="" value=""/>
<property name="" value=""/>
<property name="" value=""/>
<property name="" value=""/>
</bean>

<!--配置事务管理器-->
<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceManager">
<property name="dataSource" ref=""/>
</bean>
<!--增加对事务的支持-->
<tx:annotation-driven transaction-manager="txManager"/>

接口依赖dao(service依赖dao)

IStudentDao  IStudentService StudentServiceImpl StudentImpl

//增加注解成为事务
@Transactional(readOnly=false,progation=Propagation.REQUIRED
rollback{"SQLException",AthmeticException}
)
方法（）

7、AOP面向方面编程（实现接口）

普通类->有特定功能的类
a、继承类
b、实现接口
c、注解
d、配置

jar:
aspectj.jwearver.jar
aopaliance.jar

配置：
<!--配置前置通知-->
<bean id="studentService" class="....Impl...">
<property name="studentDao" ref="studentDao"/>
</bean>
<!--通知所在的类-->
<bean id="logBefore"  class=""></bean>

<!--将addStudent()与通知进行关联-->
<aop-config>

<!--配置切入点-->
<!--链接另一方,连接线的一段：业务类的具体方法-->
<aop:pointcut expression="execution(xxx()方法) or execution(方法)" id="方法名字pointcut"/>
<!--advisor:相当于链接切入点和切面的线-->
<!--连接线的另一端：通知类--->
<aop:advisor advice-ref="logBefore" (将两个参数连接起来)point-ref="pointcut"/>
</aop-config>

编写：
aop:每当add()之前 自动执行一个方法
add()：业务方法（IStudentService.java  addStudent()方法）
log()：自动执行的通知，即aop前置通知

logBefore implements MethodBeforeAdvice{
 public void before(){}
}
java.lang.NoClassDeFound



后置方法
通知类：普通实现接口(AfterRuningAdvice)
业务类、业务方法
StudentServiceImpl 中的方法
配置：将业务类，通知类纳入springIOC容器，定义切入点（一端）



异常通知：异常通知的实现类必须实现必须编写一下方法：
public void afterThrowing([Method,args,target],ThrowableSubclass);
pbulic void afterThrowing(ThrowableSubclass)
public void afterThrowing(Method method,Object[] args, Object target,Throwable ex){
System.out.println("异常通知:")
}
通知类：
业务类：
配置：
<bean id="logBefore"  class=""></bean>

<!--将addStudent()与通知进行关联-->
<aop-config>

<!--配置切入点-->
<!--链接另一方,连接线的一段：业务类的具体方法-->
<aop:pointcut expression="execution(xxx()方法) or execution(方法)" id="方法名字pointcut"/>
<!--advisor:相当于链接切入点和切面的线-->
<!--连接线的另一端：通知类--->
<aop:advisor advice-ref="logBefore" (将两个参数连接起来)point-ref="pointcut"/>
</aop-config>



环绕通知：在目标方法的前后、异常发生时、最终各个地方都可以进行的通知，最强大的一个通知——可以过去目标方法的全部控制权（目标方法是否执行、执行之前，执行之后，参数、返回值。。。）。
底层通过拦截器实现。。。

通知类：public class logAround implement MethodInterceptor{
public Object invoke(MethodInvocation invocation)throw Throwable{

try{

//invocation.proceed()之前的代码：前置通知
Object result=invocation.proceed();//控制目标方法的执行 addStudent()
//result 目标方法返回值

//invocation.proceed()之后的代码：后置通知
system.out.println("目标对象："+invocation.getThis()+",调用方法名："+invocation.getMethod().getName()+",方法参数个数："+invocation.getArguament.length());
}catch(Exception e){
//异常通知
}
return result;
}
}

业务类：
StudentServiceImpl
配置：
<!--将环绕放入IOC容器-->
<bean id="logAroudn"  class=""></bean>

<!--将addStudent()与通知进行关联-->
<aop-config>

<!--配置切入点-->
<!--链接另一方,连接线的一段：业务类的具体方法-->
<aop:pointcut expression="execution(xxx()方法) or execution(方法)" id="方法名字pointcut"/>
<!--advisor:相当于链接切入点和切面的线-->
<!--连接线的另一端：通知类--->
<aop:advisor advice-ref="logAround" (将两个参数连接起来)point-ref="pointcut"/>
</aop-config>


9、AOP面向编程（注解方式）
a、jar
b、配置
   将业务类、通知纳入SpringIOC容器
   开启注解对AOP的支持<aop:aspectj-autoproxy/>
   扫描器： <context-component-scan base-package="包名"/>
 扫描器会将指定的包的@Component @Service @ Resposity @Controller修饰的类产生的对象，增加到IOC容器中

c、编写
通知：
前置通知（annotation）

@Component("logAnnotation") //<bean id="logAnnotation" class=""></bean>
@Aspect  //声明该类是一个通知
public class LogBeforeAnntation{

@Before("execution(public * addStudnet（）)")//属性：切点
public void logBefore(JoinPoint jp){
System.out.println("前置：目标对象："jp.getTartget()+"，方法名："+jp.getSignature().getName()+，参数列表："+Array.toString(jp.getArgs().length);
}

@AfterReturning("pointcut="execution(public * addStudnet（）)",returning="returnValue")
public void logAfter(JoinPoint jp,Object returningValue){}
System.out.println("目标对象："jp.getTartget()+"，方法名："+jp.getSignature().getName()+，参数列表："+Array.toString(jp.getArgs().length);

//如果只捕获特定异常，通过第二个参数实现
@AfterThrowing(pointcut="execution(public * addStudnet（）)",throwing="e")
public void logException(JoinPoint jp,NullPointerException e){//此异常通知只会捕获此类异常
}
}

@Around("execution(public * addStudnet（）)")
public void lonAround(ProceedingJoinPoint jp){
//方法之前：前置通知
try{
//方法执行时

jp.proceed();
//方法执行之后：后置通知

}
catch(Throwable e){
//发生异常时

}finally{
//最终通知
}
}


@After("execution(public * addStudnet（）)")
public void logFinally(){
//最终通知
}
通知纳入容器：
<bean id="" class=""></bean> 
@Component("logAnnotation") //<bean id="logAnnotation" class=""></bean>

通过注解形式实现的aop，如果想花去目标对象的一些参数，则需要使用一个对象：JoinPoint


通过配置实现通知
基于Schema配置，类似于实现接口的方式
Schema方式通知
a、编写一个普通类 
public void logAfterSchema(JoinPoint jp,Object returnValue)throws Throwable{
//JoinPoint适用于注解，schema
public void beforeSchema(){}

//环绕通知会返回目标方法返回值
public Object around(ProceedingJoinPoint jp){
System.out.println("....前置通知....");
try{
Object result=jp.proceed();//执行方法

System.out.println("....后置通知....");
}catch{

System.out.println("....异常通知....");
}
}
}
b、将该类通过配置，
<!---将准备转为通知的类纳入IOC容器
<bean id="lonSchema" class=""></bean>
<aop:config>
<aop:pointcut expression="execution(xxxx.addStudent)" pointcut-ref="pcSchema"/>

<!--schema方式-->
<aop：aspect ref="logShema">
<!--连接线:连接业务addStudent和通知before-->
<aop:before method="方法名" pointcut-ref="pcSchema"/>
<aop:after-returning method="方法名"  returning="returnValue" pointcut-ref="psSchema"/>

<!--异常通知-->
<aop:after-throwing method="whenException方法名"  pointcut-ref="pcShema" throwing="e"/>

<!--环绕通知-->
<aop:around method="around"  pointcut-ref="pcShema" throwing="e"/>

</aop:aspect>
</aop:config>